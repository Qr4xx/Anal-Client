const { app } = require('electron')
const Store = require('electron-store');
const config = new Store();


module.exports = {
    unlimitedFps: {
        id: 'unlimitedFps',
        title: ' Unlimited FPS',
        cat: 'General',
        type: 'checkbox',
        val: config.get('unlimitedFps', true),
        restart: true,
    },
    defaultCss: {
        id: 'defaultCss',
        title: ' Default CSS',
        cat: 'General',
        type: 'checkbox',
        val: config.get('defaultCss', true),
        restart: false,
    },
    menuTimer: {
        id: 'menuTimer',
        title: ' Menu Timer',
        cat: 'General',
        type: 'checkbox',
        val: config.get('menuTimer', true),
        restart: false,
    },
    discordRpc: {
        id: 'discordRpc',
        title: ' Discord RPC',
        cat: 'General',
        type: 'checkbox',
        val: config.get('discordRpc', true),
        restart: false,
    },
    resourceSwapper: {
        id: 'resourceSwapper',
        title: ' Resource Swapper',
        cat: 'General',
        type: 'checkbox',
        val: config.get('resourceSwapper', true),
        restart: true,
    },
    userScript: {
        id: 'userScript',
        title: ' UserScript',
        cat: 'General',
        type: 'checkbox',
        val: config.get('userScript', true),
        restart: true,
    },
    quickCompHost: {
        id: 'quickCompHost',
        title: ' Quick Comp Host',
        cat: 'General',
        type: 'checkbox',
        val: config.get('quickCompHost', true),
        restart: false,
    },
    moreQuickJoin: {
        id: 'moreQuickJoin',
        title: 'More Quick Join',
        cat: 'More Quick Join',
        type: 'checkbox',
        val: config.get('moreQuickJoin', false),
        restart: false,
    },
    qjRegion: {
        id: 'qjRegion',
        title: 'Region',
        cat: 'More Quick Join',
        type: 'select',
        options: {
            "us-ca-sv": "Silicon Valley",
            "au-syd": "Sydney",
            "jb-hnd": "Tokyo",
            "us-fl": "Miami",
            "sgp": "Singapore",
            "us-nj": "New York",
            "as-mb": "Mumbai",
            "us-tx": "Dallas",
            "brz": "Brazil",
            "me-bhn": "Middle East",
            "af-ct": "South Africa",
            "sss": "EU Super Secret Servers",
            "iow": "Iowa",
        },
        val: config.get('qjRegion', "jb-hnd"),
        restart: false,
    },
    qjMode: {
        id: "qjMode",
        title: "GameMode",
        cat: "More Quick Join",
        type: "select",
        options: {
            0: 'FFA',
            1: 'TDM',
            2: 'Hardpoint',
            3: 'Capture the Flag',
            4: 'Parkour',
            5: 'Hide & Seek',
            6: 'Infected',
            7: 'Race',
            8: 'Last Man Standing',
            9: 'Simon Says',
            10: 'Gun Game',
            11: 'Prop Hunt',
            12: 'Boss Hunt',
            13: 'Stalker',
            14: 'King of the Hill',
            15: 'One in the Chamber',
            16: 'Trade',
            17: 'Kill Confirmed',
            18: 'Defuse',
            19: 'Sharp Shooter',
            20: 'Traitor',
            21: 'Raid',
            22: 'Blitz',
            23: 'Domination',
            24: 'Kranked FFA',
        },
        val: config.get("qjMode", 0)
    },
    angleBackend: {
        id: 'angleBackend',
        title: "Angle Backend",
        cat: 'Performance',
        type: 'select',
        val: config.get('angleBackend', 'default'),
        restart: true,
        options: {
            default: 'Default',
            gl: 'OpenGL',
            d3d11: 'D3D11',
            d3d9: 'D3D9',
            d3d11on12: 'D3D11on12',
        },
    },
    webgl2Context: {
        id: 'webgl2Context',
        title: "WebGL2 Context",
        cat: 'Performance',
        type: 'checkbox',
        val: config.get('webgl2Context', true),
        restart: true,
    },
    acceleratedCanvas: {
        id: 'acceleratedCanvas',
        title: "Accelerated Canvas",
        cat: 'Performance',
        type: 'checkbox',
        val: config.get('acceleratedCanvas', true),
        restart: true,
    },
    disableGpuVsync: {
        id: 'disableGpuVsync',
        title: 'Disable GPU V-Sync',
        cat: 'Performance',
        type: 'checkbox',
        val: config.get('disableGpuVsync', true),
        restart: true,
    },
    inProcess: {
        id: 'inProcess',
        title: 'inProcess GPU',
        cat: 'Performance',
        tycheckboxpe: '',
        val: config.get('inProcess', true),
        restart: true,
    },
    enableQuic: {
        id: 'enableQuic',
        title: 'Enable Quick',
        cat: 'Performance',
        type: 'checkbox',
        val: config.get('enableQuic', true),
        restart: true,
    },
    enableGpuRasterization: {
        id: 'enableGpuRasterization',
        title: 'Enable GPU Rasterization',
        cat: 'Performance',
        type: 'checkbox',
        val: config.get('enableGpuRasterization', true),
        restart: true,
    },
    enablePointerLockOptions: {
        id: 'enablePointerLockOptions',
        title: 'Enable Pointer Lock Options',
        cat: 'Performance',
        type: 'checkbox',
        val: config.get('enablePointerLockOptions', true),
        restart: true,
    },
    enableHeavyAdIntervention: {
        id: 'enableHeavyAdIntervention',
        title: 'Enable Heavy Ad Intervention',
        cat: 'Performance',
        type: 'checkbox',
        val: config.get('enableHeavyAdIntervention', true),
        restart: true,
    },
    ignoreGpuBlocklist: {
        id: 'ignoreGpuBlocklist',
        title: 'Ignore GPU Blocklist',
        cat: 'Performance',
        type: 'checkbox',
        val: config.get('ignoreGpuBlocklist', true),
        restart: true,
    },
    enableZerocopy: {
        id: 'enableZerocopy',
        title: 'Enable Zero Copy',
        cat: 'Performance',
        type: 'checkbox',
        val: config.get('enableZerocopy', true),
        restart: true,
    },

    // name: {
    //     id: '',
    //     title: '',
    //     cat: '',
    //     type: '',
    //     val: config.get('', true),
    //     restart: ,
    // },
}
